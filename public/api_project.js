define({
  "name": "Gogobot public API documentation",
  "version": "0.3.0",
  "description": "Gogobot public API endpoints",
  "apidoc": "<h1>Get Started</h1>\n\n<p>At Gogobot, we’ve released a few API’s that provide access to some of our great travel and review content. Our API’s are available to registered partners at no cost. We can’t wait to see what you build!</p>\n\n<h2>Step 1: Register</h2>\n\n<p>Download and email a signed <em>API License Agreement</em> to developersignup@gogobot.com. After review, we’ll assign a client<em>id and secret</em>key for your application.</p>\n\n<p><em>Download the API License Agreement</em></p>\n\n<h2>Step 2: Get a Signature</h2>\n\n<p>secret<em>key to generate a signature. All requests to the Gogobot API require a client</em>id and signature.\nStep 3: Start Making Requests!</p>\n\n<p>Now it’s time to start making requests to our endpoints with your shiny new client_id and signature!</p>\n\n<p>Before you use our API, don’t forget to read our <em>Terms of Use</em>.</p>\n\n<h2>Step 3: create the signature</h2>\n\n<p>All requests to the Gogobot API require the use of a client_id and signature.\nTesting and Production Environments</p>\n\n<p>A different client<em>id and secret</em>key will be provided by Gogobot for testing and production environments.\nAlgorithm</p>\n\n<p>Concatenate all params and values (in alphabetical order, removing ‘=’ and ‘&amp;’ chars). This is the payload. Note: Make sure that none of the param values are URL encoded.</p>\n\n<p>Perform an hmac-sha256 of the payload (using the secret_key provided by Gogobot)</p>\n\n<p>Perform a Base64 of the above result. Make sure the signature is url encoded.</p>\n\n<p>In summary: Base64( HMAC-SHA256(secret_key, payload) )</p>\n\n<h4>Example API Call with Signature</h4>\n\n<p>This assumes that the secret key is “12345”</p>\n\n<p>http://api.gogobot.com/api/v3/reviews/get<em>reviews.json?item</em>id=5000000067059&amp;item<em>type=Hotel&amp;client</em>id=CLIENT_ID&amp;signature=HHU%2BfgkhI3AyGAS1wPFmPJE6wiB5uyyOHUNPTQ%2BgtjM%3D</p>\n\n<p>The signature is calculated by performing a Base64 and hmac-sha256 of the contactenated param string (payload): “client<em>idCLIENT</em>IDitem<em>id5000000067059item</em>typeHotel”.</p>\n\n<p>Note: Please make sure to strip any trailing newline characters from the resulting signature. The signature should be url encoded.</p>\n\n<h4>Sample Code for Obtaining Signature</h4>\n\n<p>Here are two sample codes for obtaining the signature:</p>\n\n<h3>Java Sample Code for Signature</h3>\n\n<pre><code>public String apiSignatureFromURL(URI url, Map&lt;String, Object&gt; postMaps) {\n    String returnValue = \"\";\n    List&lt;NameValuePair&gt; query = null;\n\n    ArrayList&lt;String&gt; params = new ArrayList&lt;String&gt;();\n\n    params.add(\"client_id\" + OAUTH_CLIENT_ID);\n\n    // get request\n    if (postMaps == null &amp;&amp; url != null &amp;&amp; url.getQuery() != null) {\n        query = URLEncodedUtils.parse(url, \"utf-8\");\n        for (int i = 0; i &lt; query.size(); i++) {\n            String val = query.get(i).getValue();\n            // the parameter is not a blank string or null\n            if (val != null &amp;&amp; !val.equals(\"\")) {\n                params.add(query.get(i).getName() + query.get(i).getValue());\n            }\n        }\n        } else if (postMaps != null) {\n            Object[] keySet = postMaps.keySet().toArray();\n            for (int i = 0; i &lt; keySet.length; i++) {\n                String key = (String) keySet[i];\n\n                String value = (String) postMaps.get(key);\n                if (value != null &amp;&amp; !value.equals(\"\")) \n                {\n                    params.add(key + postMaps.get(key));\n                }\n\n            }\n        }\n\n        Collections.sort(params);\n\n        params.add(OAUTH_CLIENT_SECRET);\n\n        for (int i = 0; i &lt; params.size(); i++) {\n            returnValue = returnValue + params.get(i);\n        }\n\n        String ret  = null;\n\n        try {\n            ret = this.encodeHMAC(this.OAUTH_CLIENT_SECRET, returnValue);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n            return ret;\n        }\n    }\n}\n</code></pre>\n\n<h4>iOS Sample Code for Signature</h4>\n\n<pre><code>- (NSString *)apiSignatureFromRequest:(NSURLRequest *)request {\n    NSMutableDictionary *params;\n\n    NSURL *url = [request URL];\n\n    if (![[request HTTPMethod] isEqualToString:@\"POST\"])\n    params = [url query] ? [[[url query] httpParams] mutableCopy] : [NSMutableDictionary dictionary];\n\n    [params setValue:GOGOBOT_OAUTH_CLIENT_ID forKey:@\"client_id\"];\n\n    NSMutableString* signature = [NSMutableString stringWithCapacity:512];\n    NSArray* keys = [params.allKeys sortedArrayUsingSelector:@selector(caseInsensitiveCompare:)];\n    for (id key in [keys objectEnumerator]) {\n        id value = [params valueForKey:key];\n        if ([value isKindOfClass:[NSString class]]) {\n            [signature appendFormat:@\"%@%@\", key, value];\n        }\n    }\n    [signature appendString:GOGOBOT_OAUTH_CLIENT_SECRET];\n\n    const char *cKey  = [GOGOBOT_OAUTH_CLIENT_SECRET     \n    cStringUsingEncoding:NSUTF8StringEncoding];\n    const char *cData = [signature cStringUsingEncoding:NSUTF8StringEncoding];\n\n    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];\n\n    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);\n    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];\n\n    //NSData-Base64: https://github.com/l4u/NSData-Base64\n    return [HMAC base64EncodedString];\n}\n</code></pre>\n\n<h2>Support</h2>\n\n<p>Have a comment or question? Feel free to email us anytime for API support at api@gogobot.com.</p>",
  "generator": {
    "version": "0.2.6",
    "time": "2013-10-04T18:34:05.764Z"
  }
});